// ==========================================================================
// Rules
// ==========================================================================

// root
path / {
  read() { isSigned()}
  write() { isSigned()}
}

// categories
path /categories {
  read() { isSigned() }
  write() { isSigned() && isAdmin() }
}
path /categories/{categoryId} is Category {
  write() { isSigned() && isAdmin()}
}

// categoryKeys
path /categoryKeys {
  read() { isSigned() }
  write() { isSigned() && (isAdmin() || isEditor()) }
}

// posts
path /posts {
  read() { isSigned() }
  write() { isSigned() && (isAdmin() || isEditor()) }
}
path /posts/{postId} is Post {
  write() { isSigned() && isPostAuthor(postId) }
}


// postContents
path /postContents {
  read() { isSigned() }
  write() { isSigned() && (isAdmin() || isEditor()) }
}
path /postContents/{postId} is String {
  write() { isSigned() && isPostAuthor(postId) }
}

// postContentsHTML
path /postContentsHTML {
  read() { isSigned() }
  write() { isSigned() && (isAdmin() || isEditor()) }
}
path /postContentsHTML/{postId} is String {
  write() { isSigned() && isPostAuthor(postId) }
}
// polls
path /polls {
  read() { isSigned() }
  write() {
    isSigned() && (isAdmin() || isEditor())
  }
}
path /polls/{postId} is Poll {
  write() { isSigned() && isPostAuthor(postId) }
}

// pages
path /pages {
  read() { isSigned() }
  write() { isSigned() && (isAdmin()) }
}
path /pages/{pageId} is Page {}


// pageContents
path /pageContents {
  read() { isSigned() }
  write() { isSigned() && (isAdmin()) }
}
path /pageContents/{pageId} is String {}

// pageContentsHTML
path /pageContentsHTML {
  read() { isSigned() }
  write() { isSigned() && (isAdmin()) }
}
path /pageContentsHTML/{pageId} is String {}


// team
path /team {
  read() { isSigned() && isTeamMember() }
}
path /team/{userId} is TeamMember {
  index() {["disabled"] }
  write() { isSigned() && isAdmin() }
}

//users
path /users/{userId} is User {
  read() { isSigned() && userId === auth.uid}
  write() { isSigned() && userId === auth.uid }
}




// ==========================================================================
// Types
// ==========================================================================
type Status extends String {
  validate() { this === 'published' || this === 'draft' || this === 'hidden'}
}
type Role extends String {
  validate() { this === 'admin' || this === 'editor' || this === 'author'}
}

type Post {
  validate() { this.title.length > 0 && this.title.length <= 128 && this.subtitle.length <= 256}
  title: String,
  subtitle: String | Null,
  author: String,
  status: Status,
  featured: Boolean,
  paid: Boolean,
  category: String | Null,
  image: String | Null,
  publishTime: Number | Null,
}

// type PostContent {
//   content: Object
// }

type PollOption {
  validate() { this.value.length > 0 && this.value.length <= 128 }

  id: String,
  value: String,
  voteCount: Number
}

type Poll {
  validate() { this.question.length > 0 && this.question.length <= 128 }
  question: String,
  options: Any // PollOption[] not working for some reason
}
type User {
  pollVotes: Map<String, Number> | Null
  credits: Number | Null
  readArticles: Any
  staticPage: Any
  boughtArticles: Any
  savedArticles: Any
}

type Category {
  validate() { this.name.length > 0 && this.name.length <= 32 }
  name: String
}

type Page {
  validate() { this.title.length > 0 && this.title.length <= 128 && this.subtitle.length <= 256 }
  title: String,
  subtitle: String | Null,
}

type TeamMember {
  disabled: Boolean
}

// ==========================================================================
// Helper functions
// ==========================================================================

isSigned() {
  auth != null
}
isAdmin() {
  auth.token.role === 'admin'
}
isEditor() {
  auth.token.role === 'editor'
}
isAuthor() {
  auth.token.role === 'author'
}
isTeamMember() {
  auth.token.role != null
}
isPostAuthor(postId) {
  root.child('posts/' + postId + '/author').val() === auth.uid
}
isPollAuthor(pollId) {
  root.child('polls/' + pollId + '/author').val() === auth.uid
}
